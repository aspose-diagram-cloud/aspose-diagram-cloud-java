/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.diagram.api;

import com.aspose.cloud.diagram.client.ApiCallback;
import com.aspose.cloud.diagram.client.ApiClient;
import com.aspose.cloud.diagram.client.ApiException;
import com.aspose.cloud.diagram.client.ApiResponse;
import com.aspose.cloud.diagram.client.Configuration;
import com.aspose.cloud.diagram.client.Pair;
import com.aspose.cloud.diagram.client.ProgressRequestBody;
import com.aspose.cloud.diagram.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;

import java.io.IOException;


import java.io.File;
import com.aspose.cloud.diagram.model.FileFormatRequest;
import com.aspose.cloud.diagram.model.SaaSposeResponse;
import com.aspose.cloud.diagram.model.SaveResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiagramFileApi {
    private ApiClient apiClient;

    public DiagramFileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiagramFileApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for diagramFileGetDiagram
     * @param name The document name. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diagramFileGetDiagramCall(String name, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/diagram/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diagramFileGetDiagramValidateBeforeCall(String name, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagramFileGetDiagram(Async)");
        }
        
        
        com.squareup.okhttp.Call call = diagramFileGetDiagramCall(name, format, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read document info or export.
     * 
     * @param name The document name. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File diagramFileGetDiagram(String name, String format, String folder, String storage) throws ApiException {
        ApiResponse<File> resp = diagramFileGetDiagramWithHttpInfo(name, format, folder, storage);
        return resp.getData();
    }

    /**
     * Read document info or export.
     * 
     * @param name The document name. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> diagramFileGetDiagramWithHttpInfo(String name, String format, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = diagramFileGetDiagramValidateBeforeCall(name, format, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document info or export. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diagramFileGetDiagramAsync(String name, String format, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diagramFileGetDiagramValidateBeforeCall(name, format, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for diagramFilePostSaveAs
     * @param name The document name. (required)
     * @param format Save format. (optional)
     * @param newfilename The new file name. (optional)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diagramFilePostSaveAsCall(String name, FileFormatRequest format, String newfilename, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = format;
        
        // create path and map variables
        String localVarPath = "/diagram/{name}/SaveAs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (newfilename != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newfilename", newfilename));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (isOverwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "IsOverwrite", isOverwrite));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diagramFilePostSaveAsValidateBeforeCall(String name, FileFormatRequest format, String newfilename, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagramFilePostSaveAs(Async)");
        }
        
        
        com.squareup.okhttp.Call call = diagramFilePostSaveAsCall(name, format, newfilename, folder, isOverwrite, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert document and save result to storage.
     * 
     * @param name The document name. (required)
     * @param format Save format. (optional)
     * @param newfilename The new file name. (optional)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return SaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaveResponse diagramFilePostSaveAs(String name, FileFormatRequest format, String newfilename, String folder, Boolean isOverwrite, String storage) throws ApiException {
        ApiResponse<SaveResponse> resp = diagramFilePostSaveAsWithHttpInfo(name, format, newfilename, folder, isOverwrite, storage);
        return resp.getData();
    }

    /**
     * Convert document and save result to storage.
     * 
     * @param name The document name. (required)
     * @param format Save format. (optional)
     * @param newfilename The new file name. (optional)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaveResponse> diagramFilePostSaveAsWithHttpInfo(String name, FileFormatRequest format, String newfilename, String folder, Boolean isOverwrite, String storage) throws ApiException {
        com.squareup.okhttp.Call call = diagramFilePostSaveAsValidateBeforeCall(name, format, newfilename, folder, isOverwrite, storage, null, null);
        Type localVarReturnType = new TypeToken<SaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document and save result to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param format Save format. (optional)
     * @param newfilename The new file name. (optional)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diagramFilePostSaveAsAsync(String name, FileFormatRequest format, String newfilename, String folder, Boolean isOverwrite, String storage, final ApiCallback<SaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diagramFilePostSaveAsValidateBeforeCall(name, format, newfilename, folder, isOverwrite, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for diagramFilePutCreate
     * @param name The new document name. (required)
     * @param folder The new document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diagramFilePutCreateCall(String name, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/diagram/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (isOverwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "IsOverwrite", isOverwrite));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diagramFilePutCreateValidateBeforeCall(String name, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagramFilePutCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = diagramFilePutCreateCall(name, folder, isOverwrite, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new diagram and save result to storage.
     * 
     * @param name The new document name. (required)
     * @param folder The new document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse diagramFilePutCreate(String name, String folder, Boolean isOverwrite, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = diagramFilePutCreateWithHttpInfo(name, folder, isOverwrite, storage);
        return resp.getData();
    }

    /**
     * Create new diagram and save result to storage.
     * 
     * @param name The new document name. (required)
     * @param folder The new document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> diagramFilePutCreateWithHttpInfo(String name, String folder, Boolean isOverwrite, String storage) throws ApiException {
        com.squareup.okhttp.Call call = diagramFilePutCreateValidateBeforeCall(name, folder, isOverwrite, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new diagram and save result to storage. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param folder The new document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diagramFilePutCreateAsync(String name, String folder, Boolean isOverwrite, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diagramFilePutCreateValidateBeforeCall(name, folder, isOverwrite, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for diagramFilePutUpload
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diagramFilePutUploadCall(String localFilePath,String name, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // create path and map variables
        String localVarPath = "/diagram/{name}/upload"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (isOverwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "IsOverwrite", isOverwrite));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        File file = new File(localFilePath);
        
        final String localVarContentType ="multipart/form-data";
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("Content-Disposition","form-data; filename=\""+file.getName()+"\"" );
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        MediaType fileType = MediaType.parse("application/octet-stream");
        RequestBody body = RequestBody.create(fileType,file);
        String[] localVarAuthNames = new String[] {  };
        //localVarFormParams.put(name, file);
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diagramFilePutUploadValidateBeforeCall(String localFilePath,String name, String folder, Boolean isOverwrite, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagramFilePutUpload(Async)");
        }
        
        
        com.squareup.okhttp.Call call = diagramFilePutUploadCall(localFilePath,name, folder, isOverwrite, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload file and save result to storage.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse diagramFilePutUpload(String localFilePath,String name, String folder, Boolean isOverwrite, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = diagramFilePutUploadWithHttpInfo(localFilePath,name, folder, isOverwrite, storage);
        return resp.getData();
    }

    /**
     * Upload file and save result to storage.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> diagramFilePutUploadWithHttpInfo(String localFilePath,String name, String folder, Boolean isOverwrite, String storage) throws ApiException {
        //apiClient.setDebugging(true);
    	com.squareup.okhttp.Call call = diagramFilePutUploadValidateBeforeCall(localFilePath,name, folder, isOverwrite, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload file and save result to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param isOverwrite If true overwrite the same name file.The default value is false. (optional, default to false)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diagramFilePutUploadAsync(String localFilePath,String name, String folder, Boolean isOverwrite, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diagramFilePutUploadValidateBeforeCall(localFilePath,name, folder, isOverwrite, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
