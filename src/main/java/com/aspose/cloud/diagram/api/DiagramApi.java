/*
 * Aspose.Diagram Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aspose.cloud.diagram.api;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.aspose.cloud.diagram.client.ApiCallback;
import com.aspose.cloud.diagram.client.ApiClient;
import com.aspose.cloud.diagram.client.ApiException;
import com.aspose.cloud.diagram.client.ApiResponse;
import com.aspose.cloud.diagram.client.Configuration;
import com.aspose.cloud.diagram.client.Pair;
import com.aspose.cloud.diagram.client.ProgressRequestBody;
import com.aspose.cloud.diagram.client.ProgressResponseBody;
import com.aspose.cloud.diagram.model.AccessTokenResponse;
import com.aspose.cloud.diagram.model.CreateNewResponse;
import com.aspose.cloud.diagram.model.SaveAsResponse;
import com.aspose.cloud.diagram.model.SaveOptionsRequest;
import com.google.gson.reflect.TypeToken;

public class DiagramApi {
	private ApiClient apiClient;

	public DiagramApi() {
		this(Configuration.getDefaultApiClient());
	}

	public DiagramApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public DiagramApi(String grantType, String appSID, String appKey) throws ApiException {
		OAuthApi oAuthApi=new OAuthApi();
		ApiClient oAuthApiClient = new ApiClient();
		oAuthApiClient.setBasePath("https://api.aspose.cloud");
		oAuthApi.setApiClient(oAuthApiClient);	
		AccessTokenResponse response =oAuthApi.oAuthPost(grantType, appSID, appKey);
		String accesstoken = response.getAccessToken();
		
		apiClient= new ApiClient();
		apiClient.setBasePath("https://api.aspose.cloud/v3.0");
		//apiClient.setBasePath("http://localhost:8888");
		apiClient.addDefaultHeader("Authorization", "Bearer " + accesstoken);
		setApiClient(apiClient);
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for convertDocument
	 * 
	 * @param name
	 *            Download document name. (required)
	 * @param file
	 *            File to upload (required)
	 * @param sourceFilename
	 *            Source document name. (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call convertDocumentCall(String name, File file, String sourceFilename,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/diagram/{name}/convert".replaceAll("\\{" + "name" + "\\}",
				apiClient.escapeString(name.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (sourceFilename != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceFilename", sourceFilename));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		if (file != null)
			localVarFormParams.put("File", file);

		final String[] localVarAccepts = { "multipart/form-data" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "multipart/form-data" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "JWT" };
		return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call convertDocumentValidateBeforeCall(String name, File file, String sourceFilename,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling convertDocument(Async)");
		}

		// verify the required parameter 'file' is set
		if (file == null) {
			throw new ApiException("Missing the required parameter 'file' when calling convertDocument(Async)");
		}

		com.squareup.okhttp.Call call = convertDocumentCall(name, file, sourceFilename, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Converts document from the request&#39;s content to the specified format.
	 * 
	 * @param name
	 *            Download document name. (required)
	 * @param file
	 *            File to upload (required)
	 * @param sourceFilename
	 *            Source document name. (optional)
	 * @return File
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public File convertDocument(String name, File file, String sourceFilename) throws ApiException {
		ApiResponse<File> resp = convertDocumentWithHttpInfo(name, file, sourceFilename);
		return resp.getData();
	}

	/**
	 * Converts document from the request&#39;s content to the specified format.
	 * 
	 * @param name
	 *            Download document name. (required)
	 * @param file
	 *            File to upload (required)
	 * @param sourceFilename
	 *            Source document name. (optional)
	 * @return ApiResponse&lt;File&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<File> convertDocumentWithHttpInfo(String name, File file, String sourceFilename)
			throws ApiException {
		com.squareup.okhttp.Call call = convertDocumentValidateBeforeCall(name, file, sourceFilename, null, null);
		Type localVarReturnType = new TypeToken<File>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Converts document from the request&#39;s content to the specified format.
	 * (asynchronously)
	 * 
	 * @param name
	 *            Download document name. (required)
	 * @param file
	 *            File to upload (required)
	 * @param sourceFilename
	 *            Source document name. (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call convertDocumentAsync(String name, File file, String sourceFilename,
			final ApiCallback<File> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = convertDocumentValidateBeforeCall(name, file, sourceFilename, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<File>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for createNew
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param folder
	 *            The document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call createNewCall(String name, String folder, Boolean isOverwrite,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/diagram/{name}".replaceAll("\\{" + "name" + "\\}",
				apiClient.escapeString(name.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (folder != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
		if (isOverwrite != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "IsOverwrite", isOverwrite));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "JWT" };
		return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call createNewValidateBeforeCall(String name, String folder, Boolean isOverwrite,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling createNew(Async)");
		}

		com.squareup.okhttp.Call call = createNewCall(name, folder, isOverwrite, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Create Empty file into the specified format.
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param folder
	 *            The document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @return CreateNewResponse
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public CreateNewResponse createNew(String name, String folder, Boolean isOverwrite) throws ApiException {
		ApiResponse<CreateNewResponse> resp = createNewWithHttpInfo(name, folder, isOverwrite);
		return resp.getData();
	}

	/**
	 * Create Empty file into the specified format.
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param folder
	 *            The document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @return ApiResponse&lt;CreateNewResponse&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<CreateNewResponse> createNewWithHttpInfo(String name, String folder, Boolean isOverwrite)
			throws ApiException {
		com.squareup.okhttp.Call call = createNewValidateBeforeCall(name, folder, isOverwrite, null, null);
		Type localVarReturnType = new TypeToken<CreateNewResponse>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Create Empty file into the specified format. (asynchronously)
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param folder
	 *            The document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call createNewAsync(String name, String folder, Boolean isOverwrite,
			final ApiCallback<CreateNewResponse> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = createNewValidateBeforeCall(name, folder, isOverwrite, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<CreateNewResponse>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for downloadFileWithFormat
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param format
	 *            The destination format. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call downloadFileWithFormatCall(String name, String format, String folder,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/diagram/{name}".replaceAll("\\{" + "name" + "\\}",
				apiClient.escapeString(name.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (format != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
		if (folder != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "multipart/form-data" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "JWT" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call downloadFileWithFormatValidateBeforeCall(String name, String format, String folder,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling downloadFileWithFormat(Async)");
		}

		// verify the required parameter 'format' is set
		if (format == null) {
			throw new ApiException(
					"Missing the required parameter 'format' when calling downloadFileWithFormat(Async)");
		}

		com.squareup.okhttp.Call call = downloadFileWithFormatCall(name, format, folder, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Exports the document into the specified format.
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param format
	 *            The destination format. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @return File
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public File downloadFileWithFormat(String name, String format, String folder) throws ApiException {
		ApiResponse<File> resp = downloadFileWithFormatWithHttpInfo(name, format, folder);
		return resp.getData();
	}

	/**
	 * Exports the document into the specified format.
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param format
	 *            The destination format. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @return ApiResponse&lt;File&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<File> downloadFileWithFormatWithHttpInfo(String name, String format, String folder)
			throws ApiException {
		com.squareup.okhttp.Call call = downloadFileWithFormatValidateBeforeCall(name, format, folder, null, null);
		Type localVarReturnType = new TypeToken<File>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Exports the document into the specified format. (asynchronously)
	 * 
	 * @param name
	 *            The document name. (required)
	 * @param format
	 *            The destination format. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call downloadFileWithFormatAsync(String name, String format, String folder,
			final ApiCallback<File> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = downloadFileWithFormatValidateBeforeCall(name, format, folder, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<File>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for saveAs
	 * 
	 * @param name
	 *            Original document name. (required)
	 * @param saveOptionsRequest
	 *            Save options. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call saveAsCall(String name, SaveOptionsRequest saveOptionsRequest, String folder,
			Boolean isOverwrite, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = saveOptionsRequest;

		// create path and map variables
		String localVarPath = "/diagram/{name}/saveAs".replaceAll("\\{" + "name" + "\\}",
				apiClient.escapeString(name.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (folder != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
		if (isOverwrite != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "IsOverwrite", isOverwrite));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "JWT" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call saveAsValidateBeforeCall(String name, SaveOptionsRequest saveOptionsRequest,
			String folder, Boolean isOverwrite, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling saveAs(Async)");
		}

		// verify the required parameter 'saveOptionsRequest' is set
		if (saveOptionsRequest == null) {
			throw new ApiException("Missing the required parameter 'saveOptionsRequest' when calling saveAs(Async)");
		}

		com.squareup.okhttp.Call call = saveAsCall(name, saveOptionsRequest, folder, isOverwrite, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Converts document to destination format with detailed settings and saves
	 * result to storage.
	 * 
	 * @param name
	 *            Original document name. (required)
	 * @param saveOptionsRequest
	 *            Save options. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @return SaveAsResponse
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public SaveAsResponse saveAs(String name, SaveOptionsRequest saveOptionsRequest, String folder, Boolean isOverwrite)
			throws ApiException {
		ApiResponse<SaveAsResponse> resp = saveAsWithHttpInfo(name, saveOptionsRequest, folder, isOverwrite);
		return resp.getData();
	}

	/**
	 * Converts document to destination format with detailed settings and saves
	 * result to storage.
	 * 
	 * @param name
	 *            Original document name. (required)
	 * @param saveOptionsRequest
	 *            Save options. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @return ApiResponse&lt;SaveAsResponse&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<SaveAsResponse> saveAsWithHttpInfo(String name, SaveOptionsRequest saveOptionsRequest,
			String folder, Boolean isOverwrite) throws ApiException {
		com.squareup.okhttp.Call call = saveAsValidateBeforeCall(name, saveOptionsRequest, folder, isOverwrite, null,
				null);
		Type localVarReturnType = new TypeToken<SaveAsResponse>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Converts document to destination format with detailed settings and saves
	 * result to storage. (asynchronously)
	 * 
	 * @param name
	 *            Original document name. (required)
	 * @param saveOptionsRequest
	 *            Save options. (required)
	 * @param folder
	 *            Original document folder. (optional)
	 * @param isOverwrite
	 *            If true overwrite the same name file.The default value is false
	 *            (optional, default to false)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call saveAsAsync(String name, SaveOptionsRequest saveOptionsRequest, String folder,
			Boolean isOverwrite, final ApiCallback<SaveAsResponse> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = saveAsValidateBeforeCall(name, saveOptionsRequest, folder, isOverwrite,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<SaveAsResponse>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
