/*
 * Aspose.Diagram Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.diagram.model;

import java.util.Objects;
import com.aspose.cloud.diagram.model.PageSize;
import com.aspose.cloud.diagram.model.RectangleF;
import com.aspose.cloud.diagram.model.SaveOptionsModel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RenderingSaveOptions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-23T16:24:55.850+08:00")
public class RenderingSaveOptions extends SaveOptionsModel {
  @SerializedName("Area")
  private RectangleF area = null;

  @SerializedName("ExportGuideShapes")
  private Boolean exportGuideShapes = null;

  @SerializedName("PageSize")
  private PageSize pageSize = null;

  @SerializedName("IsExportComments")
  private Boolean isExportComments = null;

  public RenderingSaveOptions area(RectangleF area) {
    this.area = area;
    return this;
  }

   /**
   * Get area
   * @return area
  **/
  @ApiModelProperty(required = true, value = "")
  public RectangleF getArea() {
    return area;
  }

  public void setArea(RectangleF area) {
    this.area = area;
  }

  public RenderingSaveOptions exportGuideShapes(Boolean exportGuideShapes) {
    this.exportGuideShapes = exportGuideShapes;
    return this;
  }

   /**
   * Get exportGuideShapes
   * @return exportGuideShapes
  **/
  @ApiModelProperty(value = "")
  public Boolean isExportGuideShapes() {
    return exportGuideShapes;
  }

  public void setExportGuideShapes(Boolean exportGuideShapes) {
    this.exportGuideShapes = exportGuideShapes;
  }

  public RenderingSaveOptions pageSize(PageSize pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @ApiModelProperty(value = "")
  public PageSize getPageSize() {
    return pageSize;
  }

  public void setPageSize(PageSize pageSize) {
    this.pageSize = pageSize;
  }

  public RenderingSaveOptions isExportComments(Boolean isExportComments) {
    this.isExportComments = isExportComments;
    return this;
  }

   /**
   * Get isExportComments
   * @return isExportComments
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsExportComments() {
    return isExportComments;
  }

  public void setIsExportComments(Boolean isExportComments) {
    this.isExportComments = isExportComments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderingSaveOptions renderingSaveOptions = (RenderingSaveOptions) o;
    return Objects.equals(this.area, renderingSaveOptions.area) &&
        Objects.equals(this.exportGuideShapes, renderingSaveOptions.exportGuideShapes) &&
        Objects.equals(this.pageSize, renderingSaveOptions.pageSize) &&
        Objects.equals(this.isExportComments, renderingSaveOptions.isExportComments) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, exportGuideShapes, pageSize, isExportComments, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderingSaveOptions {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    exportGuideShapes: ").append(toIndentedString(exportGuideShapes)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    isExportComments: ").append(toIndentedString(isExportComments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

