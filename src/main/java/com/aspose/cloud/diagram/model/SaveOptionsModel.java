/*
 * Aspose.Diagram Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.diagram.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SaveOptionsModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-23T16:24:55.850+08:00")

public class SaveOptionsModel {
  /**
   * Gets or Sets saveFormat
   */
  @JsonAdapter(SaveFormatEnum.Adapter.class)
  public enum SaveFormatEnum {
    VDX("VDX"),
    
    VSX("VSX"),
    
    VTX("VTX"),
    
    TIFF("TIFF"),
    
    PNG("PNG"),
    
    BMP("BMP"),
    
    EMF("EMF"),
    
    JPEG("JPEG"),
    
    PDF("PDF"),
    
    XPS("XPS"),
    
    GIF("GIF"),
    
    HTML("HTML"),
    
    SVG("SVG"),
    
    SWF("SWF"),
    
    XAML("XAML"),
    
    VSDX("VSDX"),
    
    VSTX("VSTX"),
    
    VSSX("VSSX"),
    
    VSDM("VSDM"),
    
    VSSM("VSSM"),
    
    VSTM("VSTM");

    private String value;

    SaveFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SaveFormatEnum fromValue(String text) {
      for (SaveFormatEnum b : SaveFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SaveFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SaveFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SaveFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SaveFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("SaveFormat")
  private SaveFormatEnum saveFormat = null;

  @SerializedName("DefaultFont")
  private String defaultFont = null;

  public SaveOptionsModel saveFormat(SaveFormatEnum saveFormat) {
    this.saveFormat = saveFormat;
    return this;
  }

   /**
   * Get saveFormat
   * @return saveFormat
  **/
  @ApiModelProperty(required = true, value = "")
  public SaveFormatEnum getSaveFormat() {
    return saveFormat;
  }

  public void setSaveFormat(SaveFormatEnum saveFormat) {
    this.saveFormat = saveFormat;
  }

  public SaveOptionsModel defaultFont(String defaultFont) {
    this.defaultFont = defaultFont;
    return this;
  }

   /**
   * Get defaultFont
   * @return defaultFont
  **/
  @ApiModelProperty(value = "")
  public String getDefaultFont() {
    return defaultFont;
  }

  public void setDefaultFont(String defaultFont) {
    this.defaultFont = defaultFont;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveOptionsModel saveOptionsModel = (SaveOptionsModel) o;
    return Objects.equals(this.saveFormat, saveOptionsModel.saveFormat) &&
        Objects.equals(this.defaultFont, saveOptionsModel.defaultFont);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saveFormat, defaultFont);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveOptionsModel {\n");
    
    sb.append("    saveFormat: ").append(toIndentedString(saveFormat)).append("\n");
    sb.append("    defaultFont: ").append(toIndentedString(defaultFont)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

