/*
 * Aspose.Diagram Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.diagram.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PageSize
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-23T16:24:55.850+08:00")
public class PageSize {
  /**
   * Gets or Sets paperSizeFormat
   */
  @JsonAdapter(PaperSizeFormatEnum.Adapter.class)
  public enum PaperSizeFormatEnum {
    CUSTOM("Custom"),
    
    A0("A0"),
    
    A1("A1"),
    
    A2("A2"),
    
    A3("A3"),
    
    A4("A4"),
    
    A5("A5"),
    
    A6("A6"),
    
    A7("A7"),
    
    B0("B0"),
    
    B1("B1"),
    
    B2("B2"),
    
    B3("B3"),
    
    B4("B4"),
    
    B5("B5"),
    
    B6("B6"),
    
    B7("B7"),
    
    C0("C0"),
    
    C1("C1"),
    
    C2("C2"),
    
    C3("C3"),
    
    C4("C4"),
    
    C5("C5"),
    
    C6("C6"),
    
    C7("C7"),
    
    LETTER("Letter"),
    
    LEGAL("Legal"),
    
    LEGAL13("Legal13"),
    
    TABLOID("Tabloid"),
    
    EXECUTIVE("Executive"),
    
    DL("DL"),
    
    COM9("COM9"),
    
    COM10("COM10"),
    
    MONARCH("Monarch");

    private String value;

    PaperSizeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaperSizeFormatEnum fromValue(String text) {
      for (PaperSizeFormatEnum b : PaperSizeFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaperSizeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaperSizeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaperSizeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaperSizeFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaperSizeFormat")
  private PaperSizeFormatEnum paperSizeFormat = null;

  public PageSize paperSizeFormat(PaperSizeFormatEnum paperSizeFormat) {
    this.paperSizeFormat = paperSizeFormat;
    return this;
  }

   /**
   * Get paperSizeFormat
   * @return paperSizeFormat
  **/
  @ApiModelProperty(value = "")
  public PaperSizeFormatEnum getPaperSizeFormat() {
    return paperSizeFormat;
  }

  public void setPaperSizeFormat(PaperSizeFormatEnum paperSizeFormat) {
    this.paperSizeFormat = paperSizeFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageSize pageSize = (PageSize) o;
    return Objects.equals(this.paperSizeFormat, pageSize.paperSizeFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paperSizeFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageSize {\n");
    
    sb.append("    paperSizeFormat: ").append(toIndentedString(paperSizeFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

